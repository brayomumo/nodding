// .proto file for Node networking and RPC-ing

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/node_net.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Node_Invite_FullMethodName   = "/Node/Invite"
	Node_Heatbeat_FullMethodName = "/Node/Heatbeat"
	Node_SyncLog_FullMethodName  = "/Node/SyncLog"
)

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	// this allows other nodes to connect to another node
	Invite(ctx context.Context, in *InviteGreeting, opts ...grpc.CallOption) (*InviteStatus, error)
	// This is meant to act as the heartbeat shared between nodes
	Heatbeat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Beat, Beat], error)
	// This is meant to sync logs between nodes
	SyncLog(ctx context.Context, in *Log, opts ...grpc.CallOption) (*LogSyncStatus, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Invite(ctx context.Context, in *InviteGreeting, opts ...grpc.CallOption) (*InviteStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteStatus)
	err := c.cc.Invoke(ctx, Node_Invite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Heatbeat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Beat, Beat], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[0], Node_Heatbeat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Beat, Beat]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Node_HeatbeatClient = grpc.BidiStreamingClient[Beat, Beat]

func (c *nodeClient) SyncLog(ctx context.Context, in *Log, opts ...grpc.CallOption) (*LogSyncStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogSyncStatus)
	err := c.cc.Invoke(ctx, Node_SyncLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility.
type NodeServer interface {
	// this allows other nodes to connect to another node
	Invite(context.Context, *InviteGreeting) (*InviteStatus, error)
	// This is meant to act as the heartbeat shared between nodes
	Heatbeat(grpc.BidiStreamingServer[Beat, Beat]) error
	// This is meant to sync logs between nodes
	SyncLog(context.Context, *Log) (*LogSyncStatus, error)
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeServer struct{}

func (UnimplementedNodeServer) Invite(context.Context, *InviteGreeting) (*InviteStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (UnimplementedNodeServer) Heatbeat(grpc.BidiStreamingServer[Beat, Beat]) error {
	return status.Errorf(codes.Unimplemented, "method Heatbeat not implemented")
}
func (UnimplementedNodeServer) SyncLog(context.Context, *Log) (*LogSyncStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncLog not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}
func (UnimplementedNodeServer) testEmbeddedByValue()              {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	// If the following call pancis, it indicates UnimplementedNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteGreeting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Invite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Invite(ctx, req.(*InviteGreeting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Heatbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).Heatbeat(&grpc.GenericServerStream[Beat, Beat]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Node_HeatbeatServer = grpc.BidiStreamingServer[Beat, Beat]

func _Node_SyncLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SyncLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SyncLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SyncLog(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invite",
			Handler:    _Node_Invite_Handler,
		},
		{
			MethodName: "SyncLog",
			Handler:    _Node_SyncLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Heatbeat",
			Handler:       _Node_Heatbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/node_net.proto",
}
